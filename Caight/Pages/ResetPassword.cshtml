@page "{h}/{p?}"
@model Caight.ResetPasswordModel
@{
    ViewData["Title"] = "Caight - Reset password";
}

@using Caight;
@using System.Net.WebSockets;
@using System.Threading;

@{
    string uri = $"wss://{Request.Host}/ws";
    ClientWebSocket socket = new ClientWebSocket();
    await socket.ConnectAsync(new Uri(uri), CancellationToken.None);
    WebSocketConnection conn = new WebSocketConnection(socket);

    @if (Model.Hash == null)
    {
        @Model.Hash
    }
    else
    {
        @Model.Hash.Length
    }

    if (Model.Password == null)
    {
        await conn.SendBinaryAsync(Methods.IntToByteArray((int)RequestId.ResetPasswordWebOnly));
        await conn.SendTextAsync(Model.Hash);

        await conn.ReceiveAsync();
        ResponseId response = (ResponseId)Methods.ByteArrayToInt(conn.BinaryMessage);

        @switch (response)
        {
            case ResponseId.ResetPasswordPageOkWebOnly:
                {
                    await conn.ReceiveAsync();
                    string email = conn.TextMessage;
                    <h1>Hello, @(email).</h1>
                    <br />

                    <form method="get">
                        <style>
                            .input_text {
                                border-left: none;
                                border-right: none;
                                border-top: none;
                                border-width: 1px;
                                border-color: gray;
                            }
                        </style>

                        <table>
                            <tr>
                                <td>
                                    <p>
                                        New Password
                                        <br />
                                        <input id="input_passwd"
                                               class="input_text"
                                               type="password"
                                               pattern="((?=.*[a-z])(?=.*[0-9])(?=.*[!@('@')#$%^&*])(?=.*[A-Z]).{8,})"
                                               name="p"
                                               required />
                                    </p>
                                </td>
                                <td rowspan="2">
                                    <ul style="list-style: none">
                                        <li class="constraints_check">
                                            Lower case letter
                                        </li>
                                        <li class="constraints_check">
                                            Upper case letter
                                        </li>
                                        <li class="constraints_check">
                                            Digit
                                        </li>
                                        <li class="constraints_check">
                                            Special character
                                        </li>
                                        <li class="constraints_check">
                                            More than 7 letters
                                        </li>
                                    </ul>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <p>
                                        Confirm Password
                                        <br />
                                        <input id="input_passwd_confirm"
                                               class="input_text"
                                               type="password" />
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td align="right">
                                    <input id="input_submit"
                                           class="input_confirm"
                                           type="submit"
                                           value="Submit" />
                                </td>
                            </tr>
                        </table>

                        <script>
                            const passwd = document.getElementById("input_passwd");
                            const confirm = document.getElementById("input_passwd_confirm");
                            const constraints = [
                                "(.*[a-z].*)",
                                "(.*[A-Z].*)",
                                "(.*[0-9].*)",
                                "(.*[!@('@')#$%^&*].*)",
                                "(.{8,})"
                            ];
                            const checks = document.getElementsByClassName("constraints_check");

                            function validate() {
                                var pw = passwd.value;

                                for (i in constraints) {
                                    var matches = pw.match(constraints[i]) != null;

                                    if (matches) {
                                        checks[i].innerHTML = "✔" + checks[i].innerHTML.substring(1);
                                    } else {
                                        checks[i].innerHTML = "❌" + checks[i].innerHTML.substring(1);
                                    }
                                }

                                console.log(matches_all);

                                if (passwd.value !== confirm.value) {
                                    confirm.setCustomValidity("Password doesn't match.");
                                } else {
                                    confirm.setCustomValidity('');
                                }
                            }
                            validate();

                            passwd.onchange = validate;
                            confirm.onkeyup = validate;
                        </script>
                    </form>
                    break;
                }

            case ResponseId.ResetPasswordPageUsedWebOnly:
                {
                    <h1>Your password has been changed.</h1>
                    break;
                }

            case ResponseId.ResetPasswordPageExpiredWebOnly:
                {
                    <h1>This page has been expired.</h1>
                    break;
                }

            case ResponseId.ResetPasswordPageNoWebOnly:
                {
                    <h1>Unknown Page: @Model.Hash</h1>
                    break;
                }
        }
    }
    else
    {
        await conn.SendBinaryAsync(Methods.IntToByteArray((int)RequestId.ResetPasswordConfirmWebOnly));
        await conn.SendTextAsync(Model.Hash);
        await conn.SendTextAsync(Model.Password);

        await conn.ReceiveAsync();
        ResponseId response = (ResponseId)Methods.ByteArrayToInt(conn.BinaryMessage);

        await conn.CloseAsync();

        switch (response)
        {
            case ResponseId.ResetPasswordConfirmOkWebOnly:
                {
                    Response.Redirect($"https://{Request.Host}{Request.Path}");
                    break;
                }

            case ResponseId.ResetPasswordConfirmNoWebOnly:
                {
                    <h1>Invalid password pattern.</h1>
                    break;
                }

            case ResponseId.ResetPasswordConfirmErrorWebOnly:
                {
                    <h1>Error occurred.<br />Please try again.</h1>
                    break;
                }

            default:
                break;
        }
    }
}
